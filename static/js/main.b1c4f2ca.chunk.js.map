{"version":3,"sources":["assets/herolo-logo.png","services/WeatherService.js","models/Weather.js","stores/WeatherStore.js","stores/ViewStore.js","stores/index.js","components/PopUp.js","components/SearchWeather.js","components/WeatherIcon.js","models/FavoriteLocation.js","components/WheaterBox.js","components/Home.js","components/Favorites.js","components/containers/CustomMenu.js","components/containers/Master.js","components/containers/AppLodaing.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","services_WeatherService","getWeatherData","_callee","lat","lon","url","weather","regenerator_default","a","wrap","_context","prev","next","concat","axios","get","sent","abrupt","t0","stop","getWeatherForecast","_callee2","list","index","weatherForecast","i","_context2","status","data","length","saveLocationinTOFavoritesDb","location","localStorage","setItem","id","JSON","stringify","removeLocationFromFavoritesDb","removeItem","getAllFavoritesFromDb","favDB","keys","Object","localFavIndex","push","parse","getItem","googlePlaceSearch","_callee3","placeSearch","_context3","getWeatherBackgroundImage","_callee4","_context4","config","Weather","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","_descriptor11","isUndefined","coord","crood","sys","main","wind","rain","clouds","dt","cod","observable","require","WeatherStore","weaterForecast","defualtLon","defualtLat","defultImage","action","_this","loadWeatherData","loadWeatherForecast","console","error","_this2","WeatherService","then","weatherData","showModal","catch","err","_this3","name","_isUndefined","defualtCity","_this4","backImage","_this5","favDb","_callee5","_context5","googleapisError","_this6","results","geometry","lng","modalText","errorMessage","computed","ViewStore","loadded","appLoadingBoolean","viewStore","weatherStore","rootStores","_rootStores","defineProperty","window","PopUp","observer","handleOk","e","handleCancel","react_default","createElement","modal","title","visible","onOk","onCancel","footer","Component","Search","Input","SearchWeather","searchBylocation","errorValidation","setLoading","googlePlaceSearchApi","loadWeather","finish","searchValidation","test","target","value","className","placeholder","onSearch","enterButton","onChange","components_PopUp","Text","Typography","WeatherComponent","props","card","style","border","backgroundColor","fontSize","size","color","gold","marginRight","marginButtom","strong","text","FavoriteLocation","favoriteLocation","FavoriteLocation_descriptor","FavoriteLocation_descriptor2","FavoriteLocation_descriptor3","FavoriteLocation_descriptor4","FavoriteLocation_descriptor5","currentWeather","latitude","longitude","Title","WeatherBox","componentWillMount","loadBackgroundImage","componentDidUpdate","getNextFiveDays","startDate","weekday","Array","next5days","currentDate","Date","setDate","getDate","getDay","addToFavorites","temp","addLocationToFavorite","sucessMessage","renderDaysCards","backgroundColors","green","cyan","blue","geekblue","purple","today","react","map","day","key","col","span","row","align","WheaterBox_Text","WeatherIcon","humidity","speed","renderNowCards","cover","alt","src","es_button","type","onClick","icon","justify","gutter","xs","sm","md","Home","nextProps","isGeolocationEnabled","firstTime","coords","components_SearchWeather","WheaterBox","MainWithGeoloc","geolocated","positionOptions","enableHighAccuracy","userDecisionTimeout","columns","dataIndex","render","record","react_router_dom","to","getWeaterData","removeLocationFromFavorite","getAllFavorites","Favorites","table","dataSource","heroloLogo","CustomMenu","handleMenuClicked","path","history","onRedirectToHeroloaWebSite","open","heroloWebSite","menu","theme","mode","defaultSelectedKeys","Item","Footer","Layout","Content","Master","layout","CustomMenu_CustomMenu","react_router","exact","component","withRouter","AppLoading","hide","appLoadingText","Fragment","react_loading_default","height","width","App","AppLodaing","containers_Master","Boolean","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b1c4f2ca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/herolo-logo.71e6cc86.png\";","import axios from \"axios\";\n\nclass WeatherService {\n  getWeatherData = async (lat, lon) => {\n    if (lat && lon) {\n      const url = `http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=7ce29d6123a0d66008cf12b0c502470a\n      `;\n      try {\n        const weather = await axios.get(url);\n        if (weather) {\n          return weather;\n        }\n      } catch (err) {\n        throw err;\n      }\n    }\n  };\n\n  getWeatherForecast = async (lat, lon) => {\n    const list = [];\n    let index = 0;\n    if (lat && lon) {\n      const url = `http://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=7ce29d6123a0d66008cf12b0c502470a\n      `;\n      try {\n        const weatherForecast = await axios.get(url);\n        if (weatherForecast && weatherForecast.status) {\n          if (weatherForecast.data.list) {\n            for (let i = 0; i < weatherForecast.data.list.length; i++) {\n              if (i % 8 === 0) {\n                list[index] = weatherForecast.data.list[i];\n                index++;\n              }\n            }\n          }\n          weatherForecast.data.list = list;\n          return weatherForecast;\n        }\n      } catch (err) {\n        throw err;\n      }\n    }\n  };\n\n  saveLocationinTOFavoritesDb = location => {\n    localStorage.setItem(location.id, JSON.stringify(location));\n  };\n\n  removeLocationFromFavoritesDb = location => {\n    localStorage.removeItem(location.id, JSON.stringify(location));\n  };\n\n  getAllFavoritesFromDb = () => {\n    let favDB = [],\n      keys = Object.keys(localStorage),\n      localFavIndex = keys.length;\n    while (localFavIndex--) {\n      favDB.push(JSON.parse(localStorage.getItem(keys[localFavIndex])));\n    }\n\n    return favDB;\n  };\n\n  googlePlaceSearch = async location => {\n    const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${location}&key=AIzaSyCi2TROVzSRMeWXkWo0eg7srB849XLHvZo`;\n    try {\n      const placeSearch = await axios.get(url);\n      if (placeSearch) {\n        return placeSearch;\n      }\n    } catch (err) {\n      throw err;\n    }\n  };\n\n  getWeatherBackgroundImage = async location => {\n    if (location) {\n      const url = `https://source.unsplash.com/600x400/?${location}`;\n\n      try {\n        const weather = await axios.get(url);\n        if (weather) {\n          return weather.config.url;\n        }\n      } catch (err) {\n        throw err;\n      }\n    }\n  };\n}\n\nexport default new WeatherService();\n","import { observable } from \"mobx\";\nimport isUndefined from \"lodash/isUndefined\";\nexport default class Weather {\n  @observable coord;\n  @observable sys;\n  @observable Weather;\n  @observable main;\n  @observable wind;\n  @observable rain;\n  @observable clouds;\n  @observable dt;\n  @observable id;\n  @observable name;\n  @observable cod;\n\n  constructor(weather) {\n    if (!isUndefined(weather)) {\n      this.coord = weather.crood;\n      this.sys = weather.sys;\n      this.weather = weather.weather;\n      this.main = weather.main;\n      this.wind = weather.wind;\n      this.rain = weather.rain;\n      this.clouds = weather.clouds;\n      this.dt = weather.dt;\n      this.id = weather.id;\n      this.cod = weather.cod;\n    }\n  }\n}\n","import { observable, action, computed } from \"mobx\";\nimport WeatherService from \"../services/WeatherService\";\nimport Weather from \"../models/Weather\";\nimport _isUndefined from \"lodash/isUndefined\";\nconst config = require(\"../configuration.json\");\n\nexport default class WeatherStore {\n  @observable weatherData = new Weather();\n  @observable weatherFavData = new Weather();\n  @observable weatherForecast = new Weather();\n  @observable favDb;\n  @observable location = { lon: config.defualtLon, lat: config.defualtLat };\n  @observable showModal;\n  @observable modalText;\n  @observable errorValidation;\n  @observable firstTime = true;\n  @observable backImage = config.defultImage;\n\n  @action\n  loadWeather = async () => {\n    try {\n      await this.loadWeatherData();\n      await this.loadWeatherForecast();\n      return true;\n    } catch (err) {\n      console.error(err); //console.log or console.error\n    }\n  };\n\n  @action\n  loadWeatherData = async (lat, lon) => {\n    lat = lat ? lat : this.location.lat;\n    lon = lon ? lon : this.location.lon;\n    return WeatherService.getWeatherData(lat, lon)\n      .then(weatherData => {\n        if (weatherData && weatherData.status) {\n          this.weatherData = weatherData.data;\n        } else {\n          this.showModal = true;\n        }\n      })\n      .catch(err => {\n        throw err;\n      });\n  };\n\n  @action\n  loadWeatherForecast = async (lat, lon) => {\n    lat = lat ? lat : this.location.lat;\n    lon = lon ? lon : this.location.lon;\n    try {\n      const weatherForecast = await WeatherService.getWeatherForecast(lat, lon);\n      this.weatherForecast = weatherForecast.data;\n    } catch (err) {\n      throw err;\n    }\n  };\n\n  @action\n  loadBackgroundImage = async location => {\n    const name = _isUndefined(location) ? config.defualtCity : location;\n    try {\n      this.backImage = await WeatherService.getWeatherBackgroundImage(name);\n    } catch (e) {\n      throw e;\n    }\n  };\n\n  @action\n  getAllFavorites = () => {\n    this.favDb = WeatherService.getAllFavoritesFromDb();\n  };\n\n  @action\n  addLocationToFavorite = location => {\n    WeatherService.saveLocationinTOFavoritesDb(location);\n  };\n\n  @action\n  removeLocationFromFavorite = location => {\n    WeatherService.removeLocationFromFavoritesDb(location);\n  };\n\n  @action\n  googlePlaceSearchApi = async location => {\n    return WeatherService.googlePlaceSearch(location).then(placeSearch => {\n      if (placeSearch && placeSearch.data.status !== config.googleapisError) {\n        this.location.lat = placeSearch.data.results[0].geometry.location.lat;\n        this.location.lon = placeSearch.data.results[0].geometry.location.lng;\n      } else {\n        this.modalText = config.errorMessage;\n        this.showModal = true;\n      }\n    });\n  };\n\n  @computed\n  get getWeatherForecast() {\n    if (this.weaterForecast) {\n      return this.weaterForecast;\n    } else return null;\n  }\n}\n","import { observable, action } from \"mobx\";\n\nexport default class ViewStore {\n  @observable appLoadingBoolean = true;\n  @observable appLoadingText;\n\n  @action\n  setLoading = loadded => {\n    this.appLoadingBoolean = loadded;\n  };\n}\n","import WeatherStore from \"./WeatherStore\";\nimport ViewStore from \"./ViewStore\";\n\nconst viewStore = new ViewStore();\nconst weatherStore = new WeatherStore();\nconst rootStores = {\n  [WeatherStore]: weatherStore,\n  [ViewStore]: viewStore\n};\n\nwindow[\"stores\"] = rootStores;\nexport default rootStores;\n","import React, { Component } from \"react\";\nimport { Modal } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport rootStores from \"../stores\";\nimport WeatherStore from \"../stores/WeatherStore\";\n\nconst weatherStore = rootStores[WeatherStore];\n@observer\nclass PopUp extends Component {\n  showModal = () => {\n    weatherStore.showModal = true;\n  };\n\n  handleOk = e => {\n    weatherStore.showModal = false;\n  };\n\n  handleCancel = e => {\n    weatherStore.showModal = false;\n  };\n  render() {\n    return (\n      <div>\n        <Modal\n          title=\"Please notice !\"\n          visible={weatherStore.showModal}\n          onOk={this.handleOk}\n          onCancel={this.handleCancel}\n          footer={null}\n        >\n          <p>{weatherStore.modalText}</p>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default PopUp;\n","import React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\nimport rootStores from \"../stores\";\nimport WeatherStore from \"../stores/WeatherStore\";\nimport { Input } from \"antd\";\nimport PopUp from \"./PopUp\";\nimport ViewStore from \"../stores/ViewStore\";\nconst config = require(\"../configuration.json\");\n\nconst Search = Input.Search;\n\nconst weatherStore = rootStores[WeatherStore];\nconst viewStore = rootStores[ViewStore];\n@observer\nclass SearchWeather extends Component {\n  searchBylocation = async location => {\n    if (location && !weatherStore.errorValidation) {\n      try {\n        viewStore.setLoading(false);\n        await weatherStore.googlePlaceSearchApi(location);\n      } catch (err) {\n        throw err;\n      } finally {\n        weatherStore.loadWeather();\n        viewStore.setLoading(true);\n      }\n    } else {\n      weatherStore.modalText = config.errorMessage;\n      weatherStore.showModal = true;\n    }\n  };\n\n  searchValidation = e => {\n    if (/[^a-zA-Z\\s]/.test(e.target.value)) {\n      weatherStore.modalText = config.errorMessage;\n      weatherStore.errorValidation = true;\n    } else {\n      weatherStore.errorValidation = false;\n    }\n  };\n\n  render() {\n    const error = weatherStore.errorValidation ? \"error\" : \"\";\n    return (\n      <div className={`home-input-search-text ${error}`}>\n        <Search\n          className=\"home-input-city-search-text\"\n          placeholder=\"Please enter a city or country name\"\n          onSearch={value => this.searchBylocation(value)}\n          enterButton\n          onChange={e => {\n            this.searchValidation(e);\n          }}\n        />\n\n        <PopUp />\n      </div>\n    );\n  }\n}\n\nexport default SearchWeather;\n","import { gold } from \"@ant-design/colors\";\nimport { Card, Typography } from \"antd\";\nimport React from \"react\";\n// eslint-disable-next-line\nimport WeatherIcon from \"react-icons-weather\";\nconst { Text } = Typography;\n\nconst WeatherComponent = props => {\n  return (\n    <div>\n      <Card style={{ border: \"none\", backgroundColor: \"transparent\" }}>\n        <i\n          className={`wi ${props.name}`}\n          style={{\n            fontSize: `${props.size}em`,\n            color: gold[5],\n            marginRight: 10,\n            marginButtom: 20\n          }}\n        />\n\n        <br />\n        <Text strong>{props.text}</Text>\n        <br />\n\n        <Text>{props.value}</Text>\n      </Card>\n    </div>\n  );\n};\nexport default WeatherComponent;\n","import { observable } from \"mobx\";\nimport isUndefined from \"lodash/isUndefined\";\n\nexport default class FavoriteLocation {\n  @observable id;\n  @observable name;\n  @observable currentWeather;\n  @observable latitude;\n  @observable longitude;\n\n  constructor(favoriteLocation) {\n    if (!isUndefined(favoriteLocation)) {\n      this.id = favoriteLocation.id;\n      this.name = favoriteLocation.name;\n      this.currentWeather = favoriteLocation.currentWeather;\n      this.latitude = favoriteLocation.latitude;\n      this.longitude = favoriteLocation.longitude;\n    }\n  }\n}\n","import { blue, cyan, geekblue, green, purple } from \"@ant-design/colors\";\nimport { Card, Col, Row, Typography, Button, Icon } from \"antd\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport { observer } from \"mobx-react\";\nimport React, { Component, Fragment } from \"react\";\nimport rootStores from \"../stores\";\nimport WeatherStore from \"../stores/WeatherStore\";\nimport WeatherIcon from \"./WeatherIcon\";\nimport FavoriteLocation from \"../models/FavoriteLocation\";\nimport PopUp from \"./PopUp\";\nconst config = require(\"../configuration.json\");\nconst { Text, Title } = Typography;\n\nconst weatherStore = rootStores[WeatherStore];\n@observer\nclass WeatherBox extends Component {\n  componentWillMount = async () => {\n    await weatherStore.loadBackgroundImage(this.props.weather.name);\n  };\n\n  componentDidUpdate = async () => {\n    await weatherStore.loadBackgroundImage(this.props.weather.name);\n  };\n\n  getNextFiveDays = startDate => {\n    const weekday = new Array(7);\n    weekday[0] = \"Sunday\";\n    weekday[1] = \"Monday\";\n    weekday[2] = \"Tuesday\";\n    weekday[3] = \"Wednesday\";\n    weekday[4] = \"Thursday\";\n    weekday[5] = \"Friday\";\n    weekday[6] = \"Saturday\";\n\n    let next5days = [];\n    for (let i = 0; i < 5; i++) {\n      const currentDate = new Date();\n      currentDate.setDate(startDate.getDate() + i);\n      next5days.push(weekday[currentDate.getDay()]);\n    }\n    return next5days;\n  };\n\n  addToFavorites = () => {\n    const data = new FavoriteLocation();\n    data.id = this.props.weather.id;\n    data.name = this.props.weather.name;\n    data.currentWeather = this.props.weather.main.temp;\n    data.latitude = this.props.weather.coord.lat;\n    data.longitude = this.props.weather.coord.lon;\n    weatherStore.addLocationToFavorite(data);\n    weatherStore.modalText = config.sucessMessage;\n    weatherStore.showModal = true;\n  };\n\n  renderDaysCards = () => {\n    const backgroundColors = [green, cyan, blue, geekblue, purple];\n    const today = new Date();\n    const next5days = this.getNextFiveDays(today);\n    return (\n      <Fragment>\n        {this.props.weatherForecast.list.map((day, index, key) => {\n          return (\n            <Col key={index} span={24 / 5}>\n              <Card\n                style={{ backgroundColor: `${backgroundColors[index][3]}` }}\n              >\n                <Row align=\"middle\">\n                  <Col>\n                    <Text strong style={{ color: \"white\" }}>{`${\n                      next5days[index]\n                    }`}</Text>{\" \"}\n                  </Col>\n                  <WeatherIcon\n                    name=\"wi-thermometer\"\n                    size={2}\n                    text={\"Temprature\"}\n                    value={day.main.temp}\n                  />\n                  <WeatherIcon\n                    name=\"wi-humidity\"\n                    size={2}\n                    text={\"Humidty\"}\n                    value={`${day.main.humidity}%`}\n                  />\n                  <WeatherIcon\n                    name=\"wi-strong-wind\"\n                    size={2}\n                    text={\"Wind Speed\"}\n                    value={day.wind.speed}\n                  />\n                </Row>\n              </Card>\n            </Col>\n          );\n        })}\n      </Fragment>\n    );\n  };\n\n  renderNowCards = () => {\n    return (\n      <Fragment>\n        <Col span={24}>\n          <Card\n            cover={\n              <img\n                alt=\"\"\n                src={weatherStore.backImage}\n                title=\"Current Weather in\"\n              />\n            }\n          >\n            <Text>\n              Current weather in :<Title>{this.props.weather.name}</Title>\n            </Text>\n            <div />\n            <Button type=\"primary\" onClick={() => this.addToFavorites()}>\n              <Icon type=\"plus\" /> Add To Favorites\n            </Button>\n            <Row>\n              <Col span={8}>\n                <WeatherIcon\n                  name=\"wi-thermometer\"\n                  size={2}\n                  text={\"Temprature\"}\n                  value={this.props.weather.main.temp}\n                />\n              </Col>\n              <Col span={8}>\n                <WeatherIcon\n                  name=\"wi-humidity\"\n                  size={2}\n                  text={\"Humidty\"}\n                  value={`${this.props.weather.main.humidity}%`}\n                />\n              </Col>\n              <Col span={8}>\n                <WeatherIcon\n                  name=\"wi-strong-wind\"\n                  size={2}\n                  text={\"Wind Speed\"}\n                  value={this.props.weather.wind.speed}\n                />\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n      </Fragment>\n    );\n  };\n  render() {\n    return !_isUndefined(this.props.weatherForecast.list) ? (\n      <div className=\"weatherBox-main-container\">\n        <Row type=\"flex\">{this.renderNowCards()}</Row>\n        <Row\n          type=\"flex\"\n          align={\"middle\"}\n          justify={\"center\"}\n          gutter={{ xs: 8, sm: 16, md: 24 }}\n        >\n          {this.renderDaysCards()}\n        </Row>\n        <PopUp />\n      </div>\n    ) : (\n      <div className=\"weatherBox-main-container\">\n        <Row type=\"flex\">'Loading'</Row>\n      </div>\n    );\n  }\n}\n\nexport default WeatherBox;\n","import { Col, Row } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport React, { Component } from \"react\";\nimport { geolocated } from \"react-geolocated\";\nimport rootStores from \"../stores\";\nimport WeatherStore from \"../stores/WeatherStore\";\nimport \"../styles/Home.css\";\nimport SearchWeather from \"./SearchWeather\";\nimport WeatherBox from \"./WheaterBox\";\nimport ViewStore from \"../stores/ViewStore\";\n\nconst weatherStore = rootStores[WeatherStore];\nconst viewStore = rootStores[ViewStore];\n@observer\nclass Home extends Component {\n  componentDidMount() {\n    viewStore.setLoading(false);\n    weatherStore.loadWeather().then(() => {\n      viewStore.setLoading(true);\n    });\n  }\n\n  componentDidUpdate(nextProps) {\n    if (nextProps.isGeolocationEnabled && weatherStore.firstTime) {\n      if (\n        this.props.coords &&\n        this.props.coords.latitude &&\n        this.props.coords.longitude\n      ) {\n        weatherStore.location.lon = this.props.coords.longitude;\n        weatherStore.location.lat = this.props.coords.latitude;\n        viewStore.setLoading(false);\n        weatherStore.loadWeather().then(() => {\n          viewStore.setLoading(true);\n        });\n      }\n      weatherStore.firstTime = false;\n    }\n  }\n\n  render() {\n    const weather = weatherStore.weatherData;\n    const weatherForecast = weatherStore.weatherForecast;\n    if (weather && weatherForecast) {\n      return (\n        <div className=\"home-main-container\">\n          <Row className=\"home-main-row\" type=\"flex\" justify=\"center\">\n            <Col>\n              <SearchWeather />\n            </Col>\n          </Row>\n          <Row type=\"flex\" justify=\"center\">\n            <WeatherBox weatherForecast={weatherForecast} weather={weather} />\n          </Row>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nconst MainWithGeoloc = geolocated({\n  positionOptions: {\n    enableHighAccuracy: false\n  },\n  userDecisionTimeout: 5000\n})(Home);\n\nexport default MainWithGeoloc;\n","import React, { Component } from \"react\";\nimport { Table } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport rootStores from \"../stores\";\nimport WeatherStore from \"../stores/WeatherStore\";\nimport \"../styles/Favorites.css\";\nimport { NavLink } from \"react-router-dom\";\nimport ViewStore from \"../stores/ViewStore\";\n\nconst columns = [\n  {\n    title: \"Location Name\",\n    dataIndex: \"name\",\n    key: \"name\",\n    render: (text, record) => (\n      <NavLink\n        to=\"/\"\n        onClick={() => getWeaterData(record.latitude, record.longitude)}\n      >\n        {text}\n      </NavLink>\n    )\n  },\n  {\n    title: \"City Id\",\n    dataIndex: \"id\",\n    key: \"id\"\n  },\n  {\n    title: \"Current Weather\",\n    dataIndex: \"currentWeather\",\n    key: \"currentWeather\"\n  },\n  {\n    title: \"Action\",\n    key: \"action\",\n    render: (text, record) => (\n      <div\n        className=\"favorites-item-clickable\"\n        onClick={() => removeLocation(record)}\n      >\n        Delete\n      </div>\n    )\n  }\n];\n\nfunction removeLocation(location) {\n  weatherStore.removeLocationFromFavorite(location);\n  weatherStore.getAllFavorites();\n}\n\nasync function getWeaterData(latitude, longitude) {\n  weatherStore.location.lon = longitude;\n  weatherStore.location.lat = latitude;\n  viewStore.setLoading(false);\n  weatherStore.loadWeather().then(() => {\n    viewStore.setLoading(true);\n  });\n}\nconst viewStore = rootStores[ViewStore];\nconst weatherStore = rootStores[WeatherStore];\n@observer\nclass Favorites extends Component {\n  componentDidMount() {\n    weatherStore.getAllFavorites();\n  }\n  render() {\n    const data = weatherStore.favDb;\n    return (\n      <div>\n        <Table columns={columns} dataSource={data} />\n      </div>\n    );\n  }\n}\n\nexport default Favorites;\n","import React, { Component } from \"react\";\nimport { Menu, Icon, Col, Row } from \"antd\";\nimport \"../../styles/CustomMenu.css\";\nconst config = require(\"../../configuration.json\");\nconst heroloLogo = require(\"../../assets/herolo-logo.png\");\n\nexport default class CustomMenu extends Component {\n  handleMenuClicked = path => this.props.history.push(path);\n  onRedirectToHeroloaWebSite = () => {\n    window.open(config.heroloWebSite);\n  };\n  render() {\n    return (\n      <div className=\"custom-menu-main-container\">\n        <Menu\n          theme=\"light\"\n          mode=\"horizontal\"\n          defaultSelectedKeys=\"2\"\n          className=\"menu-master\"\n        >\n          <Col span={6}>\n            <Menu.Item\n              className=\"logo\"\n              key=\"1\"\n              onClick={() => this.onRedirectToHeroloaWebSite()}\n            >\n              <img alt=\"logo\" src={heroloLogo} className=\"herolo-logo\" />\n            </Menu.Item>\n          </Col>\n          <Col span={18}>\n            <Row type=\"flex\" className=\"tab-container\">\n              <Menu.Item\n                className=\"tab\"\n                key=\"2\"\n                onClick={() => this.handleMenuClicked(\"/\")}\n              >\n                <Icon className=\"icon\" fontSize={16} type=\"home\" />\n                Home\n              </Menu.Item>\n              <Menu.Item\n                key=\"3\"\n                className=\"tab\"\n                onClick={() => this.handleMenuClicked(\"/favorites\")}\n              >\n                <Icon className=\"icon\" fontSize={16} type=\"star\" />\n                Favorites\n              </Menu.Item>\n            </Row>\n          </Col>\n        </Menu>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Layout } from \"antd\";\n\nimport { Route, Switch } from \"react-router-dom\";\nimport { withRouter } from \"react-router\";\nimport \"../../styles/Master.css\";\nimport Home from \"../Home\";\nimport Favorites from \"../Favorites\";\nimport { observer } from \"mobx-react\";\nimport CustomMenu from \"./CustomMenu\";\n\nconst { Footer, Content } = Layout;\n\n@observer\nclass Master extends Component {\n  render() {\n    return (\n      <Layout className=\"layout\">\n        <CustomMenu history={this.props.history} />\n        <Content className=\"content-container\">\n          <Switch>\n            <Route path={\"/\"} exact component={Home} />\n            <Route path={\"/favorites\"} exact component={Favorites} />\n          </Switch>\n        </Content>\n        <Footer className=\"footer\">\n          Weather App ©2019 Created by Tom Lochi.\n        </Footer>\n      </Layout>\n    );\n  }\n}\n\nexport default withRouter(Master);\n","import React, { Component } from \"react\";\nimport ReactLoading from \"react-loading\";\nimport { observer } from \"mobx-react\";\nimport \"../../styles/AppLoading.css\";\nimport rootStores from \"../../stores\";\nimport ViewStore from \"../../stores/ViewStore\";\nimport \"../../styles/AppLoading.css\";\n\nconst viewStore = rootStores[ViewStore];\n@observer\nclass AppLoading extends Component {\n  render() {\n    const hide = viewStore.appLoadingBoolean ? \"hide\" : \"\";\n    const text = viewStore.appLoadingText\n      ? viewStore.appLoadingText\n      : \"loading\";\n    return (\n      <React.Fragment>\n        <div className={`react-loading-main-container ${hide}`}>\n          <ReactLoading\n            className=\"react-loading\"\n            type={\"spokes\"}\n            color={\"dodgerblue\"}\n            height={\"50%\"}\n            width={\"17%\"}\n          />\n        </div>\n        <div className=\"app-loading-text-main-contaier\">\n          <span className={`app-loading-text ${hide}`}>{text}</span>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\nexport default AppLoading;\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport Master from \"./components/containers/Master\";\nimport AppLoading from \"./components/containers/AppLodaing\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <AppLoading />\n        <Master />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}